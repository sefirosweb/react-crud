{"version":3,"file":"index-64b682ff.js","sources":["../../node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs","../../node_modules/@tanstack/react-query/build/lib/useMutation.mjs","../../src/api/crudMultiSelectTable.ts","../../src/components/forms/MultiSelectCrudTable/MultiSelectCrudTable.tsx"],"sourcesContent":["import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    var _this$currentMutation;\n\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$currentMutation2;\n\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(({\n          listener\n        }) => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };\n//# sourceMappingURL=mutationObserver.mjs.map\n","'use client';\nimport * as React from 'react';\nimport { parseMutationArgs, MutationObserver, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { shouldThrowError } from './utils.mjs';\n\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const [observer] = React.useState(() => new MutationObserver(queryClient, options));\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = useSyncExternalStore(React.useCallback(onStoreChange => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  const mutate = React.useCallback((variables, mutateOptions) => {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {\n    throw result.error;\n  }\n\n  return { ...result,\n    mutate,\n    mutateAsync: result.mutate\n  };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nfunction noop() {}\n\nexport { useMutation };\n//# sourceMappingURL=useMutation.mjs.map\n","import { axiosInstance as axios } from '../lib/axios'\n\ntype MutateData = {\n    crud: \"CREATE\" | \"DELETE\",\n    url: string,\n    dataToSend: any\n}\n\nexport const mutateData = (options: MutateData): Promise<any> => {\n    const { crud, dataToSend, url } = options\n    return new Promise((resolve, reject) => {\n        switch (crud) {\n            case \"CREATE\":\n                axios\n                    .post<{ success?: boolean }>(url, dataToSend)\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n            case \"DELETE\":\n                axios\n                    .delete<{ success?: boolean }>(url, { data: dataToSend })\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n        }\n    })\n}\n\nexport const getInputDataField = (url: string, filter: Record<string, string>) => {\n    return new Promise((resolve, reject) => {\n        if (!url) {\n            resolve(null)\n            return\n        }\n\n        axios\n            .get(url, {\n                params: filter,\n            })\n            .then((request) => resolve(request.data))\n            .catch(reject)\n    })\n}\n","import React, { forwardRef, useEffect, useRef, useState, Ref, useImperativeHandle } from \"react\";\nimport { Table } from \"./../Table\";\nimport { InputDataField, PropsRef as InputDataFieldPropsRef } from \"./../InputDataField\";\nimport { DeleteButton } from \"./../../buttons/DeleteButton\";\nimport { ColumnDefinition, DataField } from \"../../../types\";\nimport { getInputDataField } from \"../../../api/crudMultiSelectTable\";\nimport { QueryClientProvider, useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { mutateData } from \"../../../api/crudMultiSelectTable\";\nimport { useGetQueryClient } from \"../../../api/useGetQueryClient\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type Props = {\n  label?: string;\n  sentKeyAs?: string;\n  primaryKey: string;\n  primaryKeyId: string;\n  sentPrimaryKeyIdAs?: string;\n  crudUrl?: string;\n  getDataUrl: string;\n  lazyLoad?: boolean;\n  autoSave?: boolean;\n  columns: Array<ColumnDefinition<any>>;\n  handleIsLoading?: React.Dispatch<React.SetStateAction<boolean>>;\n  handleChange?: (dataModal: Array<DataField>) => void;\n};\n\nexport type PropsRef = {\n  getIds: () => Array<string>;\n  getTableData: () => Array<DataField>;\n};\n\nconst MultiSelectCrudTableAction = forwardRef(\n  (props: Props, ref: Ref<PropsRef>) => {\n    const {\n      autoSave = true,\n      label,\n      sentKeyAs,\n      primaryKey,\n      primaryKeyId,\n      sentPrimaryKeyIdAs = 'primaryKeyId',\n      crudUrl = '',\n      columns,\n      getDataUrl,\n      lazyLoad,\n      handleIsLoading,\n      handleChange,\n    } = props;\n\n    const sentKeyAsValue = sentKeyAs ?? primaryKey\n\n    const newLazyLoad = autoSave ? lazyLoad : false;\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [dataModal, setDataModal] = useState<Array<DataField>>([]);\n    const InputDataFieldRef = useRef<InputDataFieldPropsRef>(null);\n    const newColumns = [...columns];\n\n    const queryClient = useQueryClient()\n\n    const { t } = useTranslation()\n\n    const { data: dataQuery, isRefetching: isRefetchingQuery, isLoading: isLoadingQuery } = useQuery<any>({\n      queryKey: [crudUrl, primaryKeyId],\n      queryFn: () => getInputDataField(crudUrl, {\n        [sentPrimaryKeyIdAs]: primaryKeyId\n      }),\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false\n    })\n\n    const { mutate, isLoading: isLoadingMutation } = useMutation({\n      mutationFn: mutateData,\n      onSettled: (response: any) => {\n        if (response.success) {\n          queryClient.invalidateQueries({ queryKey: [crudUrl, primaryKeyId] })\n          InputDataFieldRef.current?.clear();\n        }\n      }\n    })\n\n    useEffect(() => {\n      setIsLoading(isRefetchingQuery || isLoadingMutation || isLoadingQuery)\n\n      if (handleIsLoading) {\n        handleIsLoading(isRefetchingQuery || isLoadingMutation || isLoadingQuery);\n      }\n\n    }, [isRefetchingQuery, isLoadingMutation, isLoadingQuery, handleIsLoading])\n\n    useEffect(() => {\n      if (!dataQuery) return\n      const responseData = dataQuery.data;\n      const success = dataQuery.success;\n      if (success) {\n        setDataModal(responseData);\n      }\n    }, [dataQuery, setDataModal])\n\n    useEffect(() => {\n      if (handleChange) {\n        handleChange(dataModal);\n      }\n    }, [dataModal]);\n\n    newColumns.push({\n      header: t('Delete') as string,\n      id: \"delete_crud\",\n      cell: (props) => {\n        return (\n          <DeleteButton\n            disabled={isLoading}\n            onClick={() => handleDelete(props.row.original)}\n          />\n        );\n      },\n    });\n\n    const handleDelete = (dataField: DataField) => {\n      if (autoSave) {\n        if (!crudUrl) return;\n\n        const dataToSend = {\n          ...dataField,\n          [sentKeyAsValue]: dataField[primaryKey],\n          [sentPrimaryKeyIdAs]: primaryKeyId,\n        }\n\n        mutate({\n          crud: \"DELETE\",\n          url: crudUrl,\n          dataToSend\n        })\n\n      } else {\n        const newDataModal = dataModal.filter((d) => {\n          return d[primaryKey] !== dataField[primaryKey];\n        });\n        setDataModal(newDataModal);\n      }\n    };\n\n    const onAcceptButton = (dataField: DataField) => {\n      if (autoSave) {\n        if (!crudUrl) return;\n\n        const dataToSend: any = {\n          ...dataField,\n          [sentKeyAsValue]: dataField[primaryKey],\n          [sentPrimaryKeyIdAs]: primaryKeyId,\n        }\n\n        mutate({\n          crud: \"CREATE\",\n          url: crudUrl,\n          dataToSend\n        })\n\n      } else {\n        const newDataModal = [...dataModal];\n\n        const indexOf = newDataModal.findIndex(\n          (f) => f[primaryKey] === dataField[primaryKey]\n        );\n\n        InputDataFieldRef.current?.clear();\n\n        if (indexOf >= 0) return;\n        newDataModal.push(dataField);\n        setDataModal(newDataModal);\n      }\n    };\n\n    useImperativeHandle(ref, () => ({\n      getIds() {\n        return dataModal.map((d) => d[primaryKey]);\n      },\n      getTableData() {\n        return dataModal;\n      },\n    }));\n\n    return (\n      <>\n        <InputDataField\n          label={label}\n          ref={InputDataFieldRef}\n          url={getDataUrl}\n          lazyLoad={newLazyLoad}\n          onAcceptButton={onAcceptButton}\n          isLoading={isLoading}\n        />\n        <Table\n          className=\"mt-2\"\n          columns={newColumns}\n          data={dataModal}\n          isLoading={isLoading}\n        />\n      </>\n    );\n  }\n);\n\nexport const MultiSelectCrudTable = forwardRef((props: Props, ref: Ref<PropsRef>) => {\n  const client = useGetQueryClient()\n  return (\n    <>\n      <QueryClientProvider client={client}>\n        <MultiSelectCrudTableAction  {...props} ref={ref} />\n      </QueryClientProvider>\n    </>\n  )\n})"],"names":["MutationObserver","Subscribable","client","options","_this$currentMutation","prevOptions","shallowEqualObjects","_this$currentMutation2","action","notifyOptions","variables","state","getDefaultState","result","notifyManager","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","listener","useMutation","arg1","arg2","arg3","parseMutationArgs","queryClient","useQueryClient","observer","React.useState","React.useEffect","useSyncExternalStore","React.useCallback","onStoreChange","mutate","mutateOptions","noop","shouldThrowError","mutateData","crud","dataToSend","url","resolve","reject","axios","response","getInputDataField","filter","request","MultiSelectCrudTableAction","forwardRef","props","ref","autoSave","label","sentKeyAs","primaryKey","primaryKeyId","sentPrimaryKeyIdAs","crudUrl","columns","getDataUrl","lazyLoad","handleIsLoading","handleChange","sentKeyAsValue","newLazyLoad","isLoading","setIsLoading","useState","dataModal","setDataModal","InputDataFieldRef","useRef","newColumns","t","useTranslation","dataQuery","isRefetchingQuery","isLoadingQuery","useQuery","isLoadingMutation","_a","useEffect","responseData","props2","jsx","DeleteButton","handleDelete","dataField","newDataModal","d","onAcceptButton","indexOf","f","useImperativeHandle","jsxs","Fragment","InputDataField","Table","MultiSelectCrudTable","useGetQueryClient","QueryClientProvider"],"mappings":"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","x_google_ignoreList":[0,1]}
{"version":3,"file":"index-2675dd19.js","sources":["../../src/components/forms/FormTypes/FormTypeCheckbox.tsx","../../src/components/forms/FormTypes/FormTypes.tsx"],"sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ntype HandleChange = {\n  target: {\n    name: string;\n    value: \"0\" | \"1\";\n  };\n};\n\nexport type Props = {\n  name: string;\n  controlId: string;\n  className?: string;\n  label?: string;\n  isLoading?: boolean;\n  handleChange: (handle: HandleChange) => void;\n  value?: string | number | boolean;\n};\n\nconst parser = (value: unknown): boolean => {\n  if (typeof value === \"string\") {\n    return value === \"1\" || value === \"true\";\n  }\n\n  if (typeof value === \"number\") {\n    return value === 1;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  return false;\n};\n\nexport const FormTypeCheckbox = (props: Props) => {\n  const { name, controlId, className, label, isLoading, handleChange, value } =\n    props;\n\n  const checked: boolean = parser(value);\n\n  return (\n    <Form.Group controlId={controlId} className={className}>\n      <Form.Check\n        type=\"switch\"\n        disabled={isLoading}\n        onChange={() => {\n          handleChange({\n            target: {\n              name,\n              value: checked ? \"0\" : \"1\",\n            },\n          });\n        }}\n        checked={checked}\n        label={label}\n        name={name}\n      />\n    </Form.Group>\n  );\n};\n","import React from \"react\";\nimport { FormTypeText } from \"./FormTypeText\";\nimport { FormTypeCheckbox } from \"./FormTypeCheckbox\";\nimport { FormTypeTextArea } from \"./FormTypeTextArea\";\nimport { FormTypeSelect } from \"./FormTypeSelect\";\nimport { FormTypeNumber } from \"./FormTypeNumber\";\nimport { FormTypeDate } from \"./FormTypeDate\";\nimport { FormTypePassword } from \"./FormTypePassword\";\nimport { FieldTypes, SelectOption } from \"../../../types\";\nimport { FormTypeHtml } from \"./FormTypeHtml\";\n\ntype ValidFieldTypes = Exclude<FieldTypes, FieldTypes.MULTISELECT>;\n\ntype PropsParams = {\n  text: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  html: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  number: {\n    value?: string | number;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  date: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  textarea: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  password: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  checkbox: {\n    value?: string | boolean | number;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  multiselect: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  select: {\n    value?: string | number | SelectOption;\n    options?: SelectOption[] | string[];\n    selectOptionsUrl?: string;\n  };\n};\n\nexport type Props<Field extends ValidFieldTypes = ValidFieldTypes> = {\n  [field in Field]: {\n    type: field;\n    name: string;\n    controlId: string;\n    className?: string;\n    label?: string;\n    isLoading?: boolean;\n    handleChange?: any;\n  } & PropsParams[field];\n}[Field];\n\nfunction hasField<F extends FieldTypes>(\n  props: Props,\n  type: F\n): props is Props<Extract<ValidFieldTypes, F>> {\n  return props.type === type;\n}\n\nexport const FormTypes = (props: Props): JSX.Element => {\n  if (hasField(props, FieldTypes.SELECT))\n    return (\n      <FormTypeSelect\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n        selectOptionsUrl={props.selectOptionsUrl}\n      />\n    );\n\n  if (hasField(props, FieldTypes.TEXTAREA))\n    return (\n      <FormTypeTextArea\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n  if (hasField(props, FieldTypes.HTML))\n    return (\n      <FormTypeHtml\n        className={props.className}\n        label={props.label}\n        setValue={(value) => {\n          props.handleChange({\n            target: {\n              name: props.name,\n              value\n            }\n          })\n        }}\n        options={{\n          readOnly: props.isLoading\n        }}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.CHECKBOX))\n    return (\n      <FormTypeCheckbox\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.NUMBER))\n    return (\n      <FormTypeNumber\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.DATE))\n    return (\n      <FormTypeDate\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.PASSWORD))\n    return (\n      <FormTypePassword\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  return (\n    <FormTypeText\n      name={props.name}\n      controlId={props.controlId}\n      className={props.className}\n      label={props.label}\n      isLoading={props.isLoading}\n      handleChange={props.handleChange}\n      value={props.value}\n    />\n  );\n};\n"],"names":["parser","value","FormTypeCheckbox","props","name","controlId","className","label","isLoading","handleChange","checked","jsx","Form","hasField","type","FormTypes","FieldTypes","FormTypeSelect","FormTypeTextArea","FormTypeHtml","FormTypeNumber","FormTypeDate","FormTypePassword","FormTypeText"],"mappings":"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"}
{"version":3,"file":"preview-3689251f.js","sources":["../../test/mockData/filterData.ts","../../test/mockData/axiosMock.ts","../../.storybook/preview.ts"],"sourcesContent":["import { matchString } from \"../../src/lib\"\n\nexport const filterData = (row: any, params: Record<string, FilterType>) => {\n    let result = true\n    let globalFilter = true\n\n    Object.entries(params).every(paramEntry => {\n        const keyParam = paramEntry[0]\n        const valueParam = paramEntry[1]\n\n        if (keyParam === 'globalFilter' && typeof valueParam === \"string\") {\n            if (matchGlobalFilter(row, valueParam)) {\n                globalFilter = true\n            } else {\n                globalFilter = false\n            }\n            return true\n        }\n\n        if (typeof row[keyParam] === \"undefined\") {\n            return true\n        }\n\n        if (\n            (typeof valueParam === \"string\") &&\n            !matchString(row[keyParam], valueParam)\n        ) {\n            result = false\n            return false\n        }\n\n        if (\n            (Array.isArray(valueParam) && !isNaN(valueParam[0]))\n            && row[keyParam] < valueParam[0]\n        ) {\n            result = false\n            return false\n        }\n\n        if (\n            (Array.isArray(valueParam) && !isNaN(valueParam[1]))\n            && row[keyParam] > valueParam[1]\n        ) {\n            result = false\n            return false\n        }\n\n        return true\n    })\n\n    return globalFilter && result\n}\n\n\nconst matchGlobalFilter = (row: Record<string, string | number>, valueParam: string | number) => {\n    if (valueParam === '') return true\n    let result = false\n\n    Object.entries(row).every((entry) => {\n        if (matchString(entry[1], valueParam)) {\n            result = true\n            return false\n        }\n        return true\n    })\n\n    return result\n}\n","import MockAdapter from 'axios-mock-adapter'\nimport { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport { getData, updateData } from './crudData'\nimport { filterData } from './filterData';\nimport { faker } from '@faker-js/faker';\nimport { generateOptionsValue } from './generateOptionsValue';\n\nexport type Options = {\n    timetou?: number\n}\n\ntype GenerateCrudResponse = [number, {\n    success: boolean\n    message: string\n    data: any\n}]\n\nexport const startMock = (axios: AxiosInstance, options?: Options) => {\n    const mock = new MockAdapter(axios, {\n        onNoMatch: 'passthrough',\n        delayResponse: options?.timetou ?? 600,\n    })\n\n\n    mock.onGet('/api/crud').reply((request) => {\n        console.log(`Axios request: '/api/crud' GET`)\n        console.log(request)\n        return new Promise(function (resolve) {\n            const data = getData()\n\n            const filteredData = data.filter(row => {\n                if (!request.params) return true\n                if (Object.keys(request.params).length === 0) return true\n\n                return filterData(row, request.params)\n            })\n\n            resolve([\n                200,\n                {\n                    success: true,\n                    data: filteredData,\n                },\n            ])\n        })\n    })\n\n    mock.onPost('/api/crud').reply((request) => {\n        console.log(`Axios request: '/api/crud' POST`)\n\n        const requestData = JSON.parse(request.data)\n        const data = getData()\n\n        const categories = generateOptionsValue()\n        const findCategory = categories.find(c => c.value === requestData.category_id)\n        requestData.category = findCategory?.name ?? ''\n        requestData.uuid = faker.string.uuid()\n        requestData.ean = faker.datatype.number({ min: 8000000, max: 9000000 })\n        requestData.created_at = new Date();\n\n        data.push(requestData)\n\n        return generateCrudResponse(request, 'Data inserted correctly')\n    })\n\n    mock.onPut('/api/crud').reply((request) => {\n        console.log(`Axios request: '/api/crud' PUT`)\n        const updateData = JSON.parse(request.data)\n        console.log({ updateData })\n        const uuid = JSON.parse(request.data).uuid\n\n        const data = getData()\n        const findData = data.findIndex(i => i.uuid === uuid)\n        if (findData >= 0) {\n            const categories = generateOptionsValue()\n\n            const findCategory = categories.find(c => c.value === updateData.category_id)\n            updateData.category = findCategory?.name ?? ''\n\n            data[findData] = {\n                ...data[findData],\n                ...updateData\n            }\n        }\n\n        updateData(data)\n        return generateCrudResponse(request, 'Data updated correctly')\n    })\n\n    mock.onDelete('/api/crud').reply((request) => {\n        console.log(`Axios request: '/api/crud' DELETE`)\n        console.log(JSON.parse(request.data))\n\n        const uuid = JSON.parse(request.data).uuid\n        const data = getData()\n        const findData = data.findIndex(i => i.uuid === uuid)\n        if (findData >= 0) {\n            data.splice(findData, 1)\n        }\n\n        updateData(data)\n        return generateCrudResponse(request, 'Data deleted correctly')\n    })\n    // End Simple Crud\n\n    mock.onGet('/api/get_options').reply((request) => {\n        return new Promise(function (resolve) {\n            const data = generateOptionsValue()\n            console.log(`Axios request: '/api/get_options' GET`, { data })\n\n            resolve([\n                200,\n                {\n                    success: true,\n                    data,\n                },\n            ])\n        })\n    })\n\n    // Crud for list table\n    mock.onGet('/api/sub_table').reply((request) => {\n        return new Promise(function (resolve) {\n            const data = getData().splice(0, 5)\n            console.log(`Axios request: '/api/sub_table' GET`, {\n                params: request.params,\n                data\n            })\n            resolve([\n                200,\n                {\n                    success: true,\n                    data,\n                },\n            ])\n        })\n    })\n\n    mock.onPost('/api/sub_table').reply((request) => {\n        console.log(`Axios request: '/api/sub_table' POST`)\n        console.log(JSON.parse(request.data))\n        return generateCrudResponse(request, 'Added to table')\n    })\n    mock.onDelete('/api/sub_table').reply((request) => {\n        console.log(`Axios request: '/api/sub_table' DELETE`)\n        console.log(JSON.parse(request.data))\n        return generateCrudResponse(request, 'Deleted from table')\n    })\n\n    return mock\n}\n\nconst generateCrudResponse = (request: AxiosRequestConfig, message: string): Promise<GenerateCrudResponse> => {\n    return new Promise((resolve) => {\n        resolve([\n            200,\n            {\n                success: true,\n                message,\n                data: request.data\n            },\n        ])\n    })\n}\n","import \"../scss/app.scss\"\n// import '../src/lib/axiosWithToastr'\n// import withAxiosDecorator from 'storybook-axios';\nimport { axiosInstance } from '../src/lib/axios';\nimport { startMock } from '../test/mockData'\nimport { Preview } from \"@storybook/react\";\n\nconst mock = startMock(axiosInstance)\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}\n\n// export const decorators = [withAxiosDecorator(axiosInstance)];\n\nexport default preview;\n\n"],"names":["filterData","row","params","result","globalFilter","paramEntry","keyParam","valueParam","matchGlobalFilter","matchString","entry","startMock","axios","options","mock","MockAdapter","request","resolve","filteredData","getData","requestData","data","findCategory","generateOptionsValue","c","faker","generateCrudResponse","updateData","uuid","findData","i","message","axiosInstance","preview"],"mappings":"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"}
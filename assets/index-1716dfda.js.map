{"version":3,"file":"index-1716dfda.js","sources":["../../src/types/index.ts","../../src/components/forms/FormTypes/FormTypeCheckbox.tsx","../../src/components/forms/FormTypes/FormTypes.tsx"],"sourcesContent":["import React from 'react';\nimport { CellContext, ColumnDef } from '@tanstack/react-table';\nimport { FilterLabel, Filters } from '@sefirosweb/react-multiple-search';\nimport { DateTime } from 'luxon';\n\nexport type MultiSelectOptionsColumns<TData, TValue = unknown> = {\n  columns: Array<ColumnDefinition<TData, TValue>>;\n  url: string;\n  title?: string;\n  getDataUrl: string;\n  lazyLoad?: boolean;\n  primaryKey: keyof TData;\n  sentKeyAs?: string,\n  onExitModalRefresh?: boolean;\n  onExitModal?: () => void;\n};\n\ntype ExtendStandardFields = {\n  fieldType?:\n  | FieldTypes.CHECKBOX\n  | FieldTypes.DATE\n  | FieldTypes.NUMBER\n  | FieldTypes.PASSWORD\n  | FieldTypes.TEXTAREA\n  | FieldTypes.HTML;\n  dropdown?: never;\n  multiSelectOptions?: never;\n  selectOptionsUrl?: never;\n  data?: string | number\n};\n\ntype ExtendTextField = {\n  fieldType?: FieldTypes.TEXT | FieldTypes.PASSWORD;\n  dropdown?: boolean;\n  multiSelectOptions?: never;\n  selectOptionsUrl?: never;\n  data?: string | number\n};\n\ntype ExtendMultiSelectField = {\n  fieldType?: FieldTypes.MULTISELECT;\n  dropdown?: never;\n  multiSelectOptions: MultiSelectOptionsColumns<any, any>;\n  selectOptionsUrl?: never;\n  data?: Array<string> | Array<number>\n};\n\ntype ExtendSelectField = {\n  dropdown?: never;\n  fieldType?: FieldTypes.SELECT;\n  selectOptionsUrl: string;\n  multiSelectOptions?: never;\n  data?: string | number\n};\n\nexport type ColumnDefinition<TData, TValue = unknown> = ColumnDef<\n  TData,\n  TValue\n> & {\n  accessorKey?: Extract<keyof TData, string>;\n  editable?: boolean;\n  selectOptionsUrl?: string;\n  titleOnCRUD?: string;\n  visible?: boolean;\n  getCellStyle?: (cell: CellContext<TData, TValue>) => React.CSSProperties;\n  getCellClass?: (cell: CellContext<TData, TValue>) => string;\n} & (\n    | ExtendStandardFields\n    | ExtendMultiSelectField\n    | ExtendSelectField\n    | ExtendTextField\n  );\n\nexport type SelectOption = {\n  value: string;\n  name: string;\n};\n\nexport type Variant =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'info'\n  | 'danger'\n  | 'warning';\n\nexport enum FieldTypes {\n  TEXT = 'text',\n  NUMBER = 'number',\n  DATE = 'date',\n  TEXTAREA = 'textarea',\n  HTML = 'html',\n  PASSWORD = 'password',\n  CHECKBOX = 'checkbox',\n  SELECT = 'select',\n  MULTISELECT = 'multiselect',\n}\n\nexport type CrudType = \"CREATE\" | \"UPDATE\" | \"DELETE\";\n\nexport type DataField = {\n  value: string;\n  name: string;\n} & Record<string, any>;\n\nexport type InputFilter = Record<string, unknown>\n\nexport type ModalDataToSend = Record<\n  string,\n  string | number | Array<string> | Array<number>\n>\n\nexport type EnableGlobalFilterLabels = FilterLabel\nexport type GlobalFilters = Filters\n\nexport type FilterType = FilterTypeText | FilterTypeNumbers | FilterTypeDates\n\nexport type FilterTypeText = {\n  type: 'text',\n  value: string,\n}\n\nexport type FilterTypeNumbers = {\n  type: 'number',\n  min: number | null,\n  max: number | null,\n}\n\nexport type FilterTypeDates = {\n  type: 'date',\n  min: number | null,\n  max: number | null,\n}","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ntype HandleChange = {\n  target: {\n    name: string;\n    value: \"0\" | \"1\";\n  };\n};\n\nexport type Props = {\n  name: string;\n  controlId: string;\n  className?: string;\n  label?: string;\n  isLoading?: boolean;\n  handleChange: (handle: HandleChange) => void;\n  value?: string | number | boolean;\n};\n\nconst parser = (value: unknown): boolean => {\n  if (typeof value === \"string\") {\n    return value === \"1\" || value === \"true\";\n  }\n\n  if (typeof value === \"number\") {\n    return value === 1;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  return false;\n};\n\nexport const FormTypeCheckbox = (props: Props) => {\n  const { name, controlId, className, label, isLoading, handleChange, value } =\n    props;\n\n  const checked: boolean = parser(value);\n\n  return (\n    <Form.Group controlId={controlId} className={className}>\n      <Form.Check\n        type=\"switch\"\n        disabled={isLoading}\n        onChange={() => {\n          handleChange({\n            target: {\n              name,\n              value: checked ? \"0\" : \"1\",\n            },\n          });\n        }}\n        checked={checked}\n        label={label}\n        name={name}\n      />\n    </Form.Group>\n  );\n};\n","import React from \"react\";\nimport { FormTypeText } from \"./FormTypeText\";\nimport { FormTypeCheckbox } from \"./FormTypeCheckbox\";\nimport { FormTypeTextArea } from \"./FormTypeTextArea\";\nimport { FormTypeSelect } from \"./FormTypeSelect\";\nimport { FormTypeNumber } from \"./FormTypeNumber\";\nimport { FormTypeDate } from \"./FormTypeDate\";\nimport { FormTypePassword } from \"./FormTypePassword\";\nimport { FieldTypes, SelectOption } from \"../../../types\";\nimport { FormTypeHtml } from \"./FormTypeHtml\";\n\ntype ValidFieldTypes = Exclude<FieldTypes, FieldTypes.MULTISELECT>;\n\ntype PropsParams = {\n  text: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  html: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  number: {\n    value?: string | number;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  date: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  textarea: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  password: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  checkbox: {\n    value?: string | boolean | number;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  multiselect: {\n    value?: string;\n    options?: never;\n    selectOptionsUrl?: never;\n  };\n  select: {\n    value?: string | number | SelectOption;\n    options?: SelectOption[] | string[];\n    selectOptionsUrl?: string;\n  };\n};\n\nexport type Props<Field extends ValidFieldTypes = ValidFieldTypes> = {\n  [field in Field]: {\n    type: field;\n    name: string;\n    controlId: string;\n    className?: string;\n    label?: string;\n    isLoading?: boolean;\n    handleChange?: any;\n  } & PropsParams[field];\n}[Field];\n\nfunction hasField<F extends FieldTypes>(\n  props: Props,\n  type: F\n): props is Props<Extract<ValidFieldTypes, F>> {\n  return props.type === type;\n}\n\nexport const FormTypes = (props: Props): JSX.Element => {\n  if (hasField(props, FieldTypes.SELECT))\n    return (\n      <FormTypeSelect\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n        selectOptionsUrl={props.selectOptionsUrl}\n      />\n    );\n\n  if (hasField(props, FieldTypes.TEXTAREA))\n    return (\n      <FormTypeTextArea\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n  if (hasField(props, FieldTypes.HTML))\n    return (\n      <FormTypeHtml\n        className={props.className}\n        label={props.label}\n        setValue={(value) => {\n          props.handleChange({\n            target: {\n              name: props.name,\n              value\n            }\n          })\n        }}\n        options={{\n          readOnly: props.isLoading\n        }}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.CHECKBOX))\n    return (\n      <FormTypeCheckbox\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.NUMBER))\n    return (\n      <FormTypeNumber\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.DATE))\n    return (\n      <FormTypeDate\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  if (hasField(props, FieldTypes.PASSWORD))\n    return (\n      <FormTypePassword\n        name={props.name}\n        controlId={props.controlId}\n        className={props.className}\n        label={props.label}\n        isLoading={props.isLoading}\n        handleChange={props.handleChange}\n        value={props.value}\n      />\n    );\n\n  return (\n    <FormTypeText\n      name={props.name}\n      controlId={props.controlId}\n      className={props.className}\n      label={props.label}\n      isLoading={props.isLoading}\n      handleChange={props.handleChange}\n      value={props.value}\n    />\n  );\n};\n"],"names":["FieldTypes","parser","value","FormTypeCheckbox","props","name","controlId","className","label","isLoading","handleChange","checked","jsx","Form","hasField","type","FormTypes","FormTypeSelect","FormTypeTextArea","FormTypeHtml","FormTypeNumber","FormTypeDate","FormTypePassword","FormTypeText"],"mappings":"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"}
{"version":3,"file":"FormTypeSelect-3634e20f.js","sources":["../../src/components/forms/FormTypes/FormTypeSelect.tsx"],"sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport { SelectOption } from \"../../../types\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { getFormTypeData } from \"../../../api/formTypeSelectData\";\nimport { useGetQueryClient } from \"../../../api/useGetQueryClient\";\n\nexport type Props = {\n  name: string;\n  controlId: string;\n  className?: string;\n  label?: string;\n  isLoading?: boolean;\n  isInvalid?: boolean;\n  readonly?: boolean;\n  handleChange: React.ChangeEventHandler<HTMLSelectElement>;\n  value?: string | number | SelectOption;\n  selectOptionsUrl?: string;\n  options?: SelectOption[] | string[];\n};\n\nconst FormTypeSelection = (props: Props) => {\n  const {\n    name,\n    controlId,\n    isLoading,\n    label,\n    value,\n    handleChange,\n    className,\n    selectOptionsUrl,\n    options,\n    readonly = false,\n    isInvalid\n  } = props;\n\n  const [isLoadingInternal, setIsLoadingInternal] = useState(false);\n  const [selectOptions, setSelectOptions] = useState<SelectOption[]>([]);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n\n  const { data: dataQuery, isLoading: isLoadingQuery } = useQuery<any>({\n    queryKey: [selectOptionsUrl],\n    queryFn: () => getFormTypeData(selectOptionsUrl),\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false\n  })\n\n  useEffect(() => {\n    setIsLoadingInternal(isLoadingQuery)\n  }, [isLoadingQuery])\n\n  useEffect(() => {\n    if (!dataQuery) return\n    setSelectOptions(parseOptions(dataQuery.data));\n  }, [dataQuery])\n\n  const parseOptions = (options: SelectOption[] | string[]): SelectOption[] => {\n    return options.map((o) => {\n      if (typeof o === \"string\") {\n        return {\n          name: o,\n          value: o,\n        };\n      } else {\n        return o;\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (typeof isLoading !== \"undefined\") {\n      setIsLoadingInternal(isLoading);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (typeof options !== \"undefined\") {\n      setSelectOptions(parseOptions(options));\n    }\n  }, [options]);\n\n  useEffect(() => {\n    if (value === undefined) {\n      setSelectedOption(\"\");\n    } else if (typeof value === \"string\") {\n      setSelectedOption(value);\n    } else if (typeof value === \"number\") {\n      setSelectedOption(value.toString());\n    } else {\n      setSelectedOption(value.value);\n    }\n  }, [value]);\n\n  return (\n    <Form.Group controlId={controlId} className={className}>\n      {label ? <Form.Label>{label}</Form.Label> : \"\"}\n      <Form.Select\n        isInvalid={isInvalid}\n        value={selectedOption}\n        name={name}\n        onChange={(e) => {\n          setSelectedOption(e.target.value);\n          handleChange(e);\n        }}\n        disabled={isLoadingInternal || readonly}\n      >\n        <option value={\"\"}></option>\n        {selectOptions.map((option) => {\n          return (\n            <option key={option.value} value={option.value}>\n              {option.name}\n            </option>\n          );\n        })}\n      </Form.Select>\n    </Form.Group>\n  );\n};\n\n\nexport const FormTypeSelect = (props: Props) => {\n  const client = useGetQueryClient()\n  return (\n    <>\n      <QueryClientProvider client={client}>\n        <FormTypeSelection {...props} />\n      </QueryClientProvider>\n    </>\n  )\n}"],"names":["FormTypeSelection","props","name","controlId","isLoading","label","value","handleChange","className","selectOptionsUrl","options","readonly","isInvalid","isLoadingInternal","setIsLoadingInternal","useState","selectOptions","setSelectOptions","selectedOption","setSelectedOption","dataQuery","isLoadingQuery","useQuery","getFormTypeData","useEffect","parseOptions","options2","o","jsxs","Form","jsx","e","option","FormTypeSelect","client","useGetQueryClient","Fragment","QueryClientProvider"],"mappings":"wMAsBA,MAAAA,EAAAC,GAAA,CACE,KAAA,CAAM,KAAAC,EACJ,UAAAC,EACA,UAAAC,EACA,MAAAC,EACA,MAAAC,EACA,aAAAC,EACA,UAAAC,EACA,iBAAAC,EACA,QAAAC,EACA,SAAAC,EAAA,GACW,UAAAC,CACX,EAAAX,EAGF,CAAAY,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,CAAA,CAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EAEA,CAAA,KAAAK,EAAA,UAAAC,CAAA,EAAAC,EAAA,CAAqE,SAAA,CAAAb,CAAA,EACxC,QAAA,IAAAc,EAAAd,CAAA,EACoB,mBAAA,GAC3B,qBAAA,EACE,CAAA,EAGxBe,EAAAA,UAAA,IAAA,CACEV,EAAAO,CAAA,CAAmC,EAAA,CAAAA,CAAA,CAAA,EAGrCG,EAAAA,UAAA,IAAA,CACEJ,GACAH,EAAAQ,EAAAL,EAAA,IAAA,CAAA,CAA6C,EAAA,CAAAA,CAAA,CAAA,EAG/C,MAAAK,EAAAC,GACEA,EAAA,IAAAC,GACE,OAAAA,GAAA,SACE,CAAO,KAAAA,EACC,MAAAA,CACC,EAGTA,CACF,EAIJH,OAAAA,EAAAA,UAAA,IAAA,CACE,OAAApB,EAAA,KACEU,EAAAV,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAGFoB,EAAAA,UAAA,IAAA,CACE,OAAAd,EAAA,KACEO,EAAAQ,EAAAf,CAAA,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAGFc,EAAAA,UAAA,IAAA,CAEIL,EADFb,IAAA,OACE,GAAoB,OAAAA,GAAA,SAEpBA,EAAuB,OAAAA,GAAA,SAEvBA,EAAA,SAAA,EAEAA,EAAA,KANA,CAOF,EAAA,CAAAA,CAAA,CAAA,EAGFsB,EAAAA,KAAAC,EAAA,MAAA,CAAA,UAAA1B,EAAA,UAAAK,EAAA,SAAA,CAEKH,EAAAyB,EAAA,IAAAD,EAAA,MAAA,CAAA,SAAAxB,CAAA,CAAA,EAAA,GAA2CuB,EAAA,KAC5CC,EAAA,OAAM,CAAL,UAAAjB,EACC,MAAAM,EACO,KAAAhB,EACP,SAAA6B,GAAA,CAEEZ,EAAAY,EAAA,OAAA,KAAA,EACAxB,EAAAwB,CAAA,CAAc,EAChB,SAAAlB,GAAAF,EAC+B,SAAA,CAE/BmB,EAAAA,IAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAmBd,EAAA,IAAAgB,GAEjBF,MAAA,SAAA,CAAA,MAAAE,EAAA,MAAA,SAAAA,EAAA,IAAA,EAAAA,EAAA,KAAA,CAGE,CAEH,CAAA,CAAA,CACH,CAAA,CAAA,CAGN,EAGOC,EAAAhC,GAAA,CACL,MAAAiC,EAAAC,IACA,OAAAL,EAAAA,IAAAM,EAAAA,SAAA,CAAA,SAAAN,EAAA,IAAAO,EAAA,CAAA,OAAAH,EAAA,SAAAJ,EAAA,IAAA9B,EAAA,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAOF"}
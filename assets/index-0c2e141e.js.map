{"version":3,"file":"index-0c2e141e.js","sources":["../../src/api/crudDataTable.ts","../../src/components/forms/ModalCrud/ModalCrud.tsx"],"sourcesContent":["import { axiosInstance as axios } from '../lib/axios'\nimport { CrudType, GlobalFilters, ModalDataToSend } from '../types'\n\nexport const getRequestData = (url?: string, params?: Array<GlobalFilters>) => {\n    return new Promise((resolve, reject) => {\n        if (!url) {\n            resolve(null)\n            return\n        }\n\n        axios\n            .get(url, {\n                params,\n            })\n            .then((request) => resolve(request.data))\n            .catch(reject)\n    })\n}\n\ntype MutateData = {\n    crud: CrudType,\n    url: string,\n    modalDataToSend: ModalDataToSend\n}\n\nexport const mutateData = (options: MutateData): Promise<any> => {\n    const { crud, modalDataToSend, url } = options\n    return new Promise((resolve, reject) => {\n        switch (crud) {\n            case \"CREATE\":\n                axios\n                    .post<{ success?: boolean }>(url, modalDataToSend)\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n            case \"DELETE\":\n                axios\n                    .delete<{ success?: boolean }>(url, { data: modalDataToSend })\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n            case \"UPDATE\":\n                axios\n                    .put<{ success?: boolean }>(url, modalDataToSend)\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n        }\n    })\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Modal } from \"./../Modal\";\nimport { FormTypes } from \"./../FormTypes\";\nimport { ColumnDefinition, ModalDataToSend, Variant } from \"../../../types\";\nimport { FieldTypes, CrudType, DataField } from \"../../../types\";\nimport { MultiSelectCrudTable } from \"../MultiSelectCrudTable\";\nimport { QueryClientProvider, useMutation } from \"@tanstack/react-query\";\nimport { mutateData } from \"../../../api/crudDataTable\";\nimport { useGetQueryClient } from \"../../../api/useGetQueryClient\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type Props = {\n  accept?: string;\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  title?: string;\n  url: string;\n  handleSuccess?: (response: any, crud: CrudType) => void;\n  crud: CrudType;\n  titleOnDelete?: string;\n  primaryKey: string;\n  sentKeyAs?: string;\n  fields: Array<ColumnDefinition<any>>;\n};\n\nconst FilterModalData = (fields: Array<ColumnDefinition<any, unknown>>) => {\n  const newModalData: Record<string, ColumnDefinition<any>> = {};\n  fields.forEach((field) => {\n    if (!field.accessorKey) return;\n    newModalData[field.accessorKey] = field;\n  });\n  return newModalData;\n};\n\nconst ModalCrudAction: React.FC<Props> = (props) => {\n  const {\n    show,\n    setShow,\n    title,\n    accept,\n    fields,\n    url,\n    handleSuccess,\n    crud,\n    primaryKey,\n    sentKeyAs = '',\n    titleOnDelete,\n  } = props;\n\n  const sentKeyAsValue = sentKeyAs ?? primaryKey\n\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [variantButton, setVariantButton] = useState<Variant>(\"info\");\n  const [modalData, setModalData] = useState(FilterModalData(fields));\n\n  const { t } = useTranslation()\n\n  const { mutate } = useMutation({\n    mutationFn: mutateData\n  })\n\n  useEffect(() => {\n    const newModalData = FilterModalData(fields)\n    setModalData(newModalData)\n  }, [fields])\n\n  useEffect(() => {\n    switch (crud) {\n      case \"CREATE\":\n        setVariantButton(\"success\");\n        break;\n      case \"UPDATE\":\n        setVariantButton(\"warning\");\n        break;\n      case \"DELETE\":\n        setVariantButton(\"danger\");\n        break;\n    }\n  }, [crud]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newFormData = { ...modalData };\n\n    const fieldWithData = newFormData[fieldName];\n    if (!fieldWithData) return;\n    if (fieldWithData.fieldType !== FieldTypes.MULTISELECT) {\n      fieldWithData.data = fieldValue;\n    }\n\n    setModalData(newFormData);\n  };\n\n  const handleChangeMultiSelect = (\n    data: Array<DataField>,\n    fieldName: string\n  ) => {\n    const newFormData = {\n      ...modalData,\n    };\n\n    const fieldWithData = newFormData[fieldName];\n    if (!fieldWithData) return;\n\n    if (fieldWithData.fieldType === FieldTypes.MULTISELECT) {\n      const dataList = data.map((d) => d.value);\n      fieldWithData.data = dataList;\n    }\n\n    setModalData(newFormData);\n  };\n\n  const sendRequest = () => {\n    setIsLoading(true);\n    const modalDataToSend: ModalDataToSend = {};\n\n    fields\n      .filter((f) => f.editable || f.accessorKey === primaryKey)\n      .forEach((f) => {\n        if (f.accessorKey) {\n          modalDataToSend[f.accessorKey] = modalData[f.accessorKey].data ?? \"\";\n        }\n      })\n\n    if (sentKeyAsValue) {\n      modalDataToSend[sentKeyAsValue] = modalDataToSend[primaryKey]\n    }\n\n    mutate({\n      crud,\n      modalDataToSend,\n      url\n    },\n      {\n        onSuccess: (response) => {\n          setShow(false);\n          setIsLoading(false)\n\n          if (\n            handleSuccess &&\n            {}.toString.call(handleSuccess) === \"[object Function]\"\n          ) {\n            handleSuccess(response, crud);\n          }\n        },\n        onError: () => {\n          setIsLoading(false)\n        }\n      }\n    )\n  };\n\n  const titleOnCRUD = () => {\n    if (crud === \"DELETE\") {\n      return (\n        <span>\n          <p>{t('messages.confirm_delete')}: {modalData[primaryKey].data}</p>\n          {titleOnDelete && modalData[titleOnDelete]?.data && <p>{modalData[titleOnDelete].data}</p>}\n        </span>\n      );\n    }\n    return null;\n  };\n\n  const bodyFields = () => {\n    return (\n      <>\n        <Form>\n          {fields.map((field) => {\n            if (!field.accessorKey) return null;\n            if (!field.editable) return null;\n            const fieldWithData = modalData[field.accessorKey];\n            if (!fieldWithData) return null;\n            if (!fieldWithData.accessorKey) return null;\n\n            if (fieldWithData.accessorKey === primaryKey)\n              return (\n                <Form.Control\n                  key={fieldWithData.accessorKey}\n                  type=\"hidden\"\n                  name=\"primaryKey\"\n                  value={(fieldWithData.data as string) ?? \"\"}\n                />\n              );\n\n            if (crud === \"DELETE\") return null;\n\n            if (fieldWithData.fieldType === FieldTypes.MULTISELECT) return null;\n\n            if (fieldWithData.fieldType === FieldTypes.SELECT) {\n              return (\n                <FormTypes\n                  type={fieldWithData.fieldType}\n                  key={fieldWithData.accessorKey}\n                  name={fieldWithData.accessorKey}\n                  controlId={fieldWithData.accessorKey}\n                  label={fieldWithData.titleOnCRUD ?? fieldWithData.accessorKey}\n                  isLoading={isLoading}\n                  handleChange={handleChange}\n                  value={fieldWithData.data}\n                  selectOptionsUrl={fieldWithData.selectOptionsUrl ?? \"\"}\n                  className=\"mb-2\"\n                />\n              );\n            }\n\n            return (\n              <FormTypes\n                type={fieldWithData.fieldType ?? FieldTypes.TEXT}\n                key={fieldWithData.accessorKey}\n                name={fieldWithData.accessorKey}\n                controlId={fieldWithData.accessorKey}\n                label={fieldWithData.titleOnCRUD ?? fieldWithData.accessorKey}\n                isLoading={isLoading}\n                handleChange={handleChange}\n                value={fieldWithData.data as string}\n                className=\"mb-2\"\n              />\n            );\n          })}\n          {titleOnCRUD()}\n        </Form>\n\n        {fields.map((field) => {\n          if (crud === \"DELETE\") return null;\n          if (!field.multiSelectOptions) return null;\n          if (!field.accessorKey) return null;\n          const fieldWithData = modalData[field.accessorKey];\n          if (!fieldWithData?.accessorKey) return null;\n          if (fieldWithData.fieldType !== FieldTypes.MULTISELECT) return null;\n\n          let crudUrl = \"\";\n          if (crud === \"UPDATE\") {\n            crudUrl = fieldWithData.multiSelectOptions?.url ?? \"\";\n          }\n\n          return (\n            <MultiSelectCrudTable\n              label={fieldWithData.titleOnCRUD ?? fieldWithData.accessorKey}\n              key={fieldWithData.accessorKey}\n              columns={field.multiSelectOptions.columns}\n              crudUrl={crudUrl}\n              getDataUrl={fieldWithData.multiSelectOptions.getDataUrl}\n              sentKeyAs={fieldWithData.multiSelectOptions.sentKeyAs}\n              primaryKey={fieldWithData.multiSelectOptions.primaryKey as string}\n              primaryKeyId=\"\"\n              lazyLoad={fieldWithData.multiSelectOptions.lazyLoad}\n              autoSave={false}\n              handleChange={(data) =>\n                handleChangeMultiSelect(\n                  data,\n                  fieldWithData.accessorKey as string\n                )\n              }\n            />\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <>\n      <Modal\n        show={show}\n        setShow={setShow}\n        handleAccept={sendRequest}\n        body={bodyFields()}\n        title={title}\n        // onExited={onExited}\n        isLoading={isLoading}\n        accept={accept ?? t('Accept') as string}\n        acceptVariant={variantButton}\n      />\n    </>\n  );\n};\n\n\nexport const ModalCrud: React.FC<Props> = (props) => {\n  const client = useGetQueryClient()\n  return (\n    <QueryClientProvider client={client}>\n      <ModalCrudAction {...props} />\n    </QueryClientProvider >\n  )\n}"],"names":["getRequestData","url","params","resolve","reject","axios","request","mutateData","options","crud","modalDataToSend","response","FilterModalData","fields","newModalData","field","ModalCrudAction","props","show","setShow","title","accept","handleSuccess","primaryKey","sentKeyAs","titleOnDelete","sentKeyAsValue","isLoading","setIsLoading","useState","variantButton","setVariantButton","modalData","setModalData","t","useTranslation","mutate","useMutation","useEffect","handleChange","e","fieldName","fieldValue","newFormData","fieldWithData","FieldTypes","handleChangeMultiSelect","data","dataList","d","sendRequest","f","titleOnCRUD","jsxs","_a","jsx","bodyFields","Fragment","Form","FormTypes","crudUrl","MultiSelectCrudTable","Modal","ModalCrud","client","useGetQueryClient","QueryClientProvider"],"mappings":"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"}
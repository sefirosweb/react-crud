{"version":3,"file":"index-5fa36f7a.js","sources":["../../node_modules/@tanstack/query-core/build/modern/mutationObserver.js","../../node_modules/@tanstack/react-query/build/modern/useMutation.js","../../src/api/crudMultiSelectTable.ts","../../src/components/forms/MultiSelectCrudTable/MultiSelectCrudTable.tsx"],"sourcesContent":["// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.#currentResult = void 0;\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  #client;\n  #currentResult;\n  #currentMutation;\n  #mutateOptions;\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    this.#currentMutation?.setOptions(this.options);\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(\n            action.data,\n            this.#currentResult.variables,\n            this.#currentResult.context\n          );\n          this.#mutateOptions.onSettled?.(\n            action.data,\n            null,\n            this.#currentResult.variables,\n            this.#currentResult.context\n          );\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(\n            action.error,\n            this.#currentResult.variables,\n            this.#currentResult.context\n          );\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            this.#currentResult.variables,\n            this.#currentResult.context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nfunction noop() {\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map","import { axiosInstance as axios } from '../lib/axios'\n\ntype MutateData = {\n    crud: \"CREATE\" | \"DELETE\",\n    url: string,\n    dataToSend: any\n}\n\nexport const mutateData = (options: MutateData): Promise<any> => {\n    const { crud, dataToSend, url } = options\n    return new Promise((resolve, reject) => {\n        switch (crud) {\n            case \"CREATE\":\n                axios\n                    .post<{ success?: boolean }>(url, dataToSend)\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n            case \"DELETE\":\n                axios\n                    .delete<{ success?: boolean }>(url, { data: dataToSend })\n                    .then((response) => {\n                        if (response.data.success !== true) {\n                            return reject(`The response dosen't response success`)\n                        }\n                        resolve(response.data)\n                    })\n                    .catch(reject)\n                break;\n        }\n    })\n}\n\nexport const getInputDataField = (url: string, filter: Record<string, string>) => {\n    return new Promise((resolve, reject) => {\n        if (!url) {\n            resolve(null)\n            return\n        }\n\n        axios\n            .get(url, {\n                params: filter,\n            })\n            .then((request) => resolve(request.data))\n            .catch(reject)\n    })\n}\n","import React, { forwardRef, useEffect, useRef, useState, Ref, useImperativeHandle } from \"react\";\nimport { Table } from \"./../Table\";\nimport { InputDataField, PropsRef as InputDataFieldPropsRef } from \"./../InputDataField\";\nimport { DeleteButton } from \"./../../buttons/DeleteButton\";\nimport { ColumnDefinition, DataField } from \"../../../types\";\nimport { getInputDataField } from \"../../../api/crudMultiSelectTable\";\nimport { QueryClientProvider, useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { mutateData } from \"../../../api/crudMultiSelectTable\";\nimport { useGetQueryClient } from \"../../../api/useGetQueryClient\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type Props = {\n  label?: string;\n  sentKeyAs?: string;\n  primaryKey: string;\n  primaryKeyId: string;\n  sentPrimaryKeyIdAs?: string;\n  crudUrl?: string;\n  getDataUrl: string;\n  lazyLoad?: boolean;\n  autoSave?: boolean;\n  columns: Array<ColumnDefinition<any>>;\n  handleIsLoading?: React.Dispatch<React.SetStateAction<boolean>>;\n  handleChange?: (dataModal: Array<DataField>) => void;\n};\n\nexport type PropsRef = {\n  getIds: () => Array<string>;\n  getTableData: () => Array<DataField>;\n};\n\nconst MultiSelectCrudTableAction = forwardRef(\n  (props: Props, ref: Ref<PropsRef>) => {\n    const {\n      autoSave = true,\n      label,\n      sentKeyAs,\n      primaryKey,\n      primaryKeyId,\n      sentPrimaryKeyIdAs = 'primaryKeyId',\n      crudUrl = '',\n      columns,\n      getDataUrl,\n      lazyLoad,\n      handleIsLoading,\n      handleChange,\n    } = props;\n\n    const sentKeyAsValue = sentKeyAs ?? primaryKey\n\n    const newLazyLoad = autoSave ? lazyLoad : false;\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [dataModal, setDataModal] = useState<Array<DataField>>([]);\n    const InputDataFieldRef = useRef<InputDataFieldPropsRef>(null);\n    const newColumns = [...columns];\n\n    const queryClient = useQueryClient()\n\n    const { t } = useTranslation()\n\n    const { data: dataQuery, isRefetching: isRefetchingQuery, isLoading: isLoadingQuery } = useQuery<any>({\n      queryKey: [crudUrl, primaryKeyId],\n      queryFn: () => getInputDataField(crudUrl, {\n        [sentPrimaryKeyIdAs]: primaryKeyId\n      }),\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false\n    })\n\n    const { mutate, isPending: isLoadingMutation } = useMutation({\n      mutationFn: mutateData,\n      onSettled: (response: any) => {\n        if (response.success) {\n          queryClient.invalidateQueries({ queryKey: [crudUrl, primaryKeyId] })\n          InputDataFieldRef.current?.clear();\n        }\n      }\n    })\n\n    useEffect(() => {\n      setIsLoading(isRefetchingQuery || isLoadingMutation || isLoadingQuery)\n\n      if (handleIsLoading) {\n        handleIsLoading(isRefetchingQuery || isLoadingMutation || isLoadingQuery);\n      }\n\n    }, [isRefetchingQuery, isLoadingMutation, isLoadingQuery, handleIsLoading])\n\n    useEffect(() => {\n      if (!dataQuery) return\n      const responseData = dataQuery.data;\n      const success = dataQuery.success;\n      if (success) {\n        setDataModal(responseData);\n      }\n    }, [dataQuery, setDataModal])\n\n    useEffect(() => {\n      if (handleChange) {\n        handleChange(dataModal);\n      }\n    }, [dataModal]);\n\n    newColumns.push({\n      header: t('Delete') as string,\n      id: \"delete_crud\",\n      cell: (props) => {\n        return (\n          <DeleteButton\n            disabled={isLoading}\n            onClick={() => handleDelete(props.row.original)}\n          />\n        );\n      },\n    });\n\n    const handleDelete = (dataField: DataField) => {\n      if (autoSave) {\n        if (!crudUrl) return;\n\n        const dataToSend = {\n          ...dataField,\n          [sentKeyAsValue]: dataField[primaryKey],\n          [sentPrimaryKeyIdAs]: primaryKeyId,\n        }\n\n        mutate({\n          crud: \"DELETE\",\n          url: crudUrl,\n          dataToSend\n        })\n\n      } else {\n        const newDataModal = dataModal.filter((d) => {\n          return d[primaryKey] !== dataField[primaryKey];\n        });\n        setDataModal(newDataModal);\n      }\n    };\n\n    const onAcceptButton = (dataField: DataField) => {\n      if (autoSave) {\n        if (!crudUrl) return;\n\n        const dataToSend: any = {\n          ...dataField,\n          [sentKeyAsValue]: dataField[primaryKey],\n          [sentPrimaryKeyIdAs]: primaryKeyId,\n        }\n\n        mutate({\n          crud: \"CREATE\",\n          url: crudUrl,\n          dataToSend\n        })\n\n      } else {\n        const newDataModal = [...dataModal];\n\n        const indexOf = newDataModal.findIndex(\n          (f) => f[primaryKey] === dataField[primaryKey]\n        );\n\n        InputDataFieldRef.current?.clear();\n\n        if (indexOf >= 0) return;\n        newDataModal.push(dataField);\n        setDataModal(newDataModal);\n      }\n    };\n\n    useImperativeHandle(ref, () => ({\n      getIds() {\n        return dataModal.map((d) => d[primaryKey]);\n      },\n      getTableData() {\n        return dataModal;\n      },\n    }));\n\n    return (\n      <>\n        <InputDataField\n          label={label}\n          ref={InputDataFieldRef}\n          url={getDataUrl}\n          lazyLoad={newLazyLoad}\n          onAcceptButton={onAcceptButton}\n          isLoading={isLoading}\n        />\n        <Table\n          className=\"mt-2\"\n          columns={newColumns}\n          data={dataModal}\n          isLoading={isLoading}\n        />\n      </>\n    );\n  }\n);\n\nexport const MultiSelectCrudTable = forwardRef((props: Props, ref: Ref<PropsRef>) => {\n  const client = useGetQueryClient()\n  return (\n    <>\n      <QueryClientProvider client={client}>\n        <MultiSelectCrudTableAction  {...props} ref={ref} />\n      </QueryClientProvider>\n    </>\n  )\n})"],"names":["MutationObserver","_a","Subscribable","client","options","__privateAdd","_updateResult","_notify","_client","_currentResult","_currentMutation","_mutateOptions","__privateSet","__privateMethod","updateResult_fn","prevOptions","__privateGet","shallowEqualObjects","action","notify_fn","variables","state","getDefaultState","notifyManager","_b","_d","_c","_f","_e","_h","_g","listener","useMutation","queryClient","useQueryClient","observer","React.useState","React.useEffect","result","React.useSyncExternalStore","React.useCallback","onStoreChange","mutate","mutateOptions","noop","shouldThrowError","mutateData","crud","dataToSend","url","resolve","reject","axios","response","getInputDataField","filter","request","MultiSelectCrudTableAction","forwardRef","props","ref","autoSave","label","sentKeyAs","primaryKey","primaryKeyId","sentPrimaryKeyIdAs","crudUrl","columns","getDataUrl","lazyLoad","handleIsLoading","handleChange","sentKeyAsValue","newLazyLoad","isLoading","setIsLoading","useState","dataModal","setDataModal","InputDataFieldRef","useRef","newColumns","t","useTranslation","dataQuery","isRefetchingQuery","isLoadingQuery","useQuery","isLoadingMutation","useEffect","responseData","props2","jsx","DeleteButton","handleDelete","dataField","newDataModal","d","onAcceptButton","indexOf","f","useImperativeHandle","jsxs","Fragment","InputDataField","Table","MultiSelectCrudTable","useGetQueryClient","QueryClientProvider"],"mappings":"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","x_google_ignoreList":[0,1]}